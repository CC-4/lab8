
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 05 13:16:41 CST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 05 13:16:41 CST 2016
  */
public class ViperParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ViperParser() {super();}

  /** Constructor which sets the default scanner. */
  public ViperParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\015\000" +
    "\002\007\004\000\002\010\004\000\002\010\003\000\002" +
    "\011\005\000\002\011\003\000\002\011\003\000\002\012" +
    "\005\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\014\004\000\002\015\004\000\002\015\006\000" +
    "\002\015\006\000\002\015\007\000\002\015\015\000\002" +
    "\015\011\000\002\015\004\000\002\020\005\000\002\020" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\004\000\002\016\005\000\002\016\006\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\004\004\005\001\002\000\004\004" +
    "\166\001\002\000\004\020\013\001\002\000\010\002\001" +
    "\003\004\004\005\001\002\000\010\002\ufffe\003\ufffe\004" +
    "\ufffe\001\002\000\004\002\011\001\002\000\004\002\000" +
    "\001\002\000\010\002\uffff\003\uffff\004\uffff\001\002\000" +
    "\004\025\014\001\002\000\010\020\015\026\uffce\045\uffce" +
    "\001\002\000\004\027\164\001\002\000\006\026\ufff4\045" +
    "\ufff4\001\002\000\006\026\022\045\021\001\002\000\006" +
    "\026\ufff3\045\ufff3\001\002\000\004\020\015\001\002\000" +
    "\004\027\023\001\002\000\010\015\030\016\025\017\026" +
    "\001\002\000\004\030\031\001\002\000\012\020\ufffc\026" +
    "\ufffc\030\ufffc\045\ufffc\001\002\000\004\030\ufffa\001\002" +
    "\000\004\030\ufffb\001\002\000\012\020\ufffd\026\ufffd\030" +
    "\ufffd\045\ufffd\001\002\000\036\003\047\005\046\006\037" +
    "\010\033\011\uffce\014\034\015\030\016\025\020\041\021" +
    "\036\022\051\023\032\025\040\031\uffce\001\002\000\040" +
    "\012\uffe2\013\uffe2\024\uffe2\026\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\001\002\000\004\025\155\001\002\000" +
    "\016\014\034\020\054\021\036\022\051\023\032\025\040" +
    "\001\002\000\036\003\047\005\046\006\037\010\033\011" +
    "\ufff1\014\034\015\030\016\025\020\041\021\036\022\051" +
    "\023\032\025\040\031\ufff1\001\002\000\040\012\uffe4\013" +
    "\uffe4\024\uffe4\026\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\001\002\000\004\025\141\001\002\000\016\014\034" +
    "\020\054\021\036\022\051\023\032\025\040\001\002\000" +
    "\040\012\uffe1\013\uffe1\024\uffe1\025\110\032\134\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\001\002\000\006\011\126\031\uffce" +
    "\001\002\000\034\012\056\013\071\024\125\033\062\034" +
    "\057\035\060\036\064\037\063\040\061\041\072\042\070" +
    "\043\067\044\065\001\002\000\004\020\117\001\002\000" +
    "\006\011\ufff0\031\ufff0\001\002\000\004\025\053\001\002" +
    "\000\004\024\052\001\002\000\036\003\uffef\005\uffef\006" +
    "\uffef\010\uffef\011\uffef\014\uffef\015\uffef\016\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\025\uffef\031\uffef\001\002\000" +
    "\040\012\uffe3\013\uffe3\024\uffe3\026\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\001\002\000\036\003\uffe7\005\uffe7" +
    "\006\uffe7\010\uffe7\011\uffe7\014\uffe7\015\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\031\uffe7\001\002" +
    "\000\016\014\034\020\054\021\036\022\051\023\032\025" +
    "\040\001\002\000\042\012\uffe1\013\uffe1\024\uffe1\025\110" +
    "\026\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002" +
    "\000\034\012\056\013\071\026\066\033\062\034\057\035" +
    "\060\036\064\037\063\040\061\041\072\042\070\043\067" +
    "\044\065\001\002\000\016\014\034\020\054\021\036\022" +
    "\051\023\032\025\040\001\002\000\016\014\034\020\054" +
    "\021\036\022\051\023\032\025\040\001\002\000\016\014" +
    "\034\020\054\021\036\022\051\023\032\025\040\001\002" +
    "\000\016\014\034\020\054\021\036\022\051\023\032\025" +
    "\040\001\002\000\016\014\034\020\054\021\036\022\051" +
    "\023\032\025\040\001\002\000\016\014\034\020\054\021" +
    "\036\022\051\023\032\025\040\001\002\000\016\014\034" +
    "\020\054\021\036\022\051\023\032\025\040\001\002\000" +
    "\016\014\034\020\054\021\036\022\051\023\032\025\040" +
    "\001\002\000\004\024\077\001\002\000\016\014\034\020" +
    "\054\021\036\022\051\023\032\025\040\001\002\000\016" +
    "\014\034\020\054\021\036\022\051\023\032\025\040\001" +
    "\002\000\016\014\034\020\054\021\036\022\051\023\032" +
    "\025\040\001\002\000\016\014\034\020\054\021\036\022" +
    "\051\023\032\025\040\001\002\000\024\012\uffda\013\uffda" +
    "\024\uffda\026\uffda\033\062\034\057\035\060\036\064\045" +
    "\uffda\001\002\000\040\012\056\013\uffd5\024\uffd5\026\uffd5" +
    "\033\062\034\057\035\060\036\064\037\063\040\061\041" +
    "\072\042\070\043\067\044\065\045\uffd5\001\002\000\024" +
    "\012\uffd9\013\uffd9\024\uffd9\026\uffd9\033\062\034\057\035" +
    "\060\036\064\045\uffd9\001\002\000\024\012\uffd8\013\uffd8" +
    "\024\uffd8\026\uffd8\033\062\034\057\035\060\036\064\045" +
    "\uffd8\001\002\000\036\003\uffea\005\uffea\006\uffea\010\uffea" +
    "\011\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\025\uffea\031\uffea\001\002\000\024\012\uffd7" +
    "\013\uffd7\024\uffd7\026\uffd7\033\062\034\057\035\060\036" +
    "\064\045\uffd7\001\002\000\040\012\uffdd\013\uffdd\024\uffdd" +
    "\026\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\001\002" +
    "\000\024\012\uffdc\013\uffdc\024\uffdc\026\uffdc\033\062\034" +
    "\057\035\060\036\064\045\uffdc\001\002\000\040\012\uffe0" +
    "\013\uffe0\024\uffe0\026\uffe0\033\uffe0\034\uffe0\035\060\036" +
    "\064\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\001\002\000\024\012\uffdb\013\uffdb\024\uffdb\026" +
    "\uffdb\033\062\034\057\035\060\036\064\045\uffdb\001\002" +
    "\000\040\012\uffde\013\uffde\024\uffde\026\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\001\002\000\040\012\uffdf\013" +
    "\uffdf\024\uffdf\026\uffdf\033\uffdf\034\uffdf\035\060\036\064" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\001\002\000\040\012\uffd6\013\uffd6\024\uffd6\026\uffd6" +
    "\033\062\034\057\035\060\036\064\037\063\040\061\041" +
    "\072\042\070\043\067\044\065\045\uffd6\001\002\000\022" +
    "\014\034\020\054\021\036\022\051\023\032\025\040\026" +
    "\uffce\045\uffce\001\002\000\006\026\115\045\114\001\002" +
    "\000\006\026\uffcf\045\uffcf\001\002\000\036\012\056\013" +
    "\071\026\uffd0\033\062\034\057\035\060\036\064\037\063" +
    "\040\061\041\072\042\070\043\067\044\065\045\uffd0\001" +
    "\002\000\016\014\034\020\054\021\036\022\051\023\032" +
    "\025\040\001\002\000\040\012\uffd2\013\uffd2\024\uffd2\026" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\001\002\000" +
    "\036\012\056\013\071\026\uffd1\033\062\034\057\035\060" +
    "\036\064\037\063\040\061\041\072\042\070\043\067\044" +
    "\065\045\uffd1\001\002\000\006\024\uffce\032\122\001\002" +
    "\000\004\024\124\001\002\000\004\024\ufff6\001\002\000" +
    "\016\014\034\020\054\021\036\022\051\023\032\025\040" +
    "\001\002\000\034\012\056\013\071\024\ufff7\033\062\034" +
    "\057\035\060\036\064\037\063\040\061\041\072\042\070" +
    "\043\067\044\065\001\002\000\036\003\uffeb\005\uffeb\006" +
    "\uffeb\010\uffeb\011\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\025\uffeb\031\uffeb\001\002\000" +
    "\036\003\uffed\005\uffed\006\uffed\010\uffed\011\uffed\014\uffed" +
    "\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025" +
    "\uffed\031\uffed\001\002\000\016\014\034\020\054\021\036" +
    "\022\051\023\032\025\040\001\002\000\004\031\uffe5\001" +
    "\002\000\004\031\131\001\002\000\010\002\ufff9\003\ufff9" +
    "\004\ufff9\001\002\000\034\012\056\013\071\024\133\033" +
    "\062\034\057\035\060\036\064\037\063\040\061\041\072" +
    "\042\070\043\067\044\065\001\002\000\004\031\uffe6\001" +
    "\002\000\016\014\034\020\054\021\036\022\051\023\032" +
    "\025\040\001\002\000\034\012\056\013\071\024\136\033" +
    "\062\034\057\035\060\036\064\037\063\040\061\041\072" +
    "\042\070\043\067\044\065\001\002\000\036\003\uffec\005" +
    "\uffec\006\uffec\010\uffec\011\uffec\014\uffec\015\uffec\016\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec\031\uffec\001" +
    "\002\000\034\012\056\013\071\026\140\033\062\034\057" +
    "\035\060\036\064\037\063\040\061\041\072\042\070\043" +
    "\067\044\065\001\002\000\040\012\uffd3\013\uffd3\024\uffd3" +
    "\026\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\001\002" +
    "\000\016\014\034\020\054\021\036\022\051\023\032\025" +
    "\040\001\002\000\034\012\056\013\071\026\143\033\062" +
    "\034\057\035\060\036\064\037\063\040\061\041\072\042" +
    "\070\043\067\044\065\001\002\000\004\030\144\001\002" +
    "\000\034\003\047\005\046\006\037\010\033\014\034\015" +
    "\030\016\025\020\041\021\036\022\051\023\032\025\040" +
    "\031\uffce\001\002\000\004\031\146\001\002\000\004\007" +
    "\147\001\002\000\004\030\150\001\002\000\034\003\047" +
    "\005\046\006\037\010\033\014\034\015\030\016\025\020" +
    "\041\021\036\022\051\023\032\025\040\031\uffce\001\002" +
    "\000\004\031\152\001\002\000\036\003\uffe9\005\uffe9\006" +
    "\uffe9\010\uffe9\011\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\025\uffe9\031\uffe9\001\002\000" +
    "\036\003\uffee\005\uffee\006\uffee\010\uffee\011\uffee\014\uffee" +
    "\015\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025" +
    "\uffee\031\uffee\001\002\000\040\012\uffd4\013\uffd4\024\uffd4" +
    "\026\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\001\002" +
    "\000\016\014\034\020\054\021\036\022\051\023\032\025" +
    "\040\001\002\000\034\012\056\013\071\026\157\033\062" +
    "\034\057\035\060\036\064\037\063\040\061\041\072\042" +
    "\070\043\067\044\065\001\002\000\004\030\160\001\002" +
    "\000\034\003\047\005\046\006\037\010\033\014\034\015" +
    "\030\016\025\020\041\021\036\022\051\023\032\025\040" +
    "\031\uffce\001\002\000\004\031\162\001\002\000\036\003" +
    "\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\031" +
    "\uffe8\001\002\000\006\026\ufff5\045\ufff5\001\002\000\006" +
    "\015\030\016\025\001\002\000\006\026\ufff2\045\ufff2\001" +
    "\002\000\010\002\ufff8\003\ufff8\004\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\003\007\004\005\007\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\016\012\015" +
    "\021\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\162\001\001" +
    "\000\002\001\001\000\006\005\026\006\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\043\013\041\014" +
    "\034\015\047\016\042\021\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\153\001\001\000\010\005" +
    "\043\015\152\016\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\136\001\001\000\002\001\001\000" +
    "\006\020\127\021\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\106\001\001\000\004\016\105\001\001" +
    "\000\004\016\104\001\001\000\004\016\103\001\001\000" +
    "\004\016\102\001\001\000\004\016\101\001\001\000\004" +
    "\016\100\001\001\000\004\016\077\001\001\000\002\001" +
    "\001\000\004\016\075\001\001\000\004\016\074\001\001" +
    "\000\004\016\073\001\001\000\004\016\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\112\017\110\021\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\117" +
    "\021\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\043\013\144\014\034\015\047\016\042" +
    "\021\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\043\013\150\014\034\015\047" +
    "\016\042\021\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\043\013\160\014\034\015\047\016\042\021\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\164\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ViperParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ViperParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    @SuppressWarnings("rawtypes") java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ViperParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private int omerrs = 0;

    public void syntax_error(Symbol token) {
        int lineno = action_obj.getLine();
        System.err.println("line " + lineno + ": parse error at or near " + Utils.printToken(token) + ".");
        omerrs++;
        if(omerrs > 50) {
            System.err.println("More than 50 errors.");
            System.exit(1);
        }
    }

    public int getErrorCount() {
        return this.omerrs;
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        // Nada que hacer si no se recupera de los errores
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ViperParser$actions {



    public int getLine() {
        return ((ViperLexer)parser.getScanner()).getLineNo();
    }


  private final ViperParser parser;

  /** Constructor */
  CUP$ViperParser$actions(ViperParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ViperParser$do_action(
    int                        CUP$ViperParser$act_num,
    java_cup.runtime.lr_parser CUP$ViperParser$parser,
    @SuppressWarnings("rawtypes") java.util.Stack            CUP$ViperParser$stack,
    int                        CUP$ViperParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ViperParser$result;

      /* select the action based on the action number */
      switch (CUP$ViperParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EPSILON ::= 
            {
              Object RESULT = null;

              CUP$ViperParser$result = new java_cup.runtime.Symbol(15/*EPSILON*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACTUALS ::= EPSILON 
            {
              Actuals RESULT = null;
         RESULT = new Actuals(getLine()); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(13/*ACTUALS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACTUALS ::= EXPR 
            {
              Actuals RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = (new Actuals(getLine())).appendElement(e); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(13/*ACTUALS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ACTUALS ::= ACTUALS COMMA EXPR 
            {
              Actuals RESULT = null;
        Actuals l = (Actuals)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = l.appendElement(e); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(13/*ACTUALS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPR ::= ID LPAREN ACTUALS RPAREN 
            {
              Expression RESULT = null;
        String i = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-3)).value;
        Actuals a = (Actuals)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = new Call(getLine(), i, a); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPR ::= LPAREN EXPR RPAREN 
            {
              Expression RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = e; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPR ::= NOT EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Not(getLine(), e1); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= EXPR OR EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Or(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= EXPR AND EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new And(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= EXPR GT EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Gt(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPR ::= EXPR LT EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Lt(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPR ::= EXPR GEQ EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Geq(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPR ::= EXPR LEQ EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Leq(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPR ::= EXPR NEQ EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Neq(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPR ::= EXPR EQ EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Eq(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPR ::= EXPR DIV EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Div(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPR ::= EXPR MULT EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Mult(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPR ::= EXPR MINUS EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Minus(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPR ::= EXPR PLUS EXPR 
            {
              Expression RESULT = null;
        Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Plus(getLine(), e1, e2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPR ::= ID 
            {
              Expression RESULT = null;
        String i = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Id(getLine(), i); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPR ::= STRCONST 
            {
              Expression RESULT = null;
        String s = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new StrConst(getLine(), s); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPR ::= BOOLCONST 
            {
              Expression RESULT = null;
        Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new BoolConst(getLine(), b); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPR ::= INTCONST 
            {
              Expression RESULT = null;
        String i = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new IntConst(getLine(), i); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(12/*EXPR*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURNE ::= EPSILON 
            {
              Expression RESULT = null;
         RESULT = new NoReturn(getLine()); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(14/*RETURNE*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURNE ::= RETURN EXPR SEMI 
            {
              Expression RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = new Return(getLine(), e); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(14/*RETURNE*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENT ::= error SEMI 
            {
              Statement RESULT = null;

              CUP$ViperParser$result = new java_cup.runtime.Symbol(11/*STATEMENT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENT ::= WHILE LPAREN EXPR RPAREN LBRACE STATEMENTS RBRACE 
            {
              Statement RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-4)).value;
        Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = new While(getLine(), e, s); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(11/*STATEMENT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENT ::= IF LPAREN EXPR RPAREN LBRACE STATEMENTS RBRACE ELSE LBRACE STATEMENTS RBRACE 
            {
              Statement RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-8)).value;
        Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-5)).value;
        Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = new If(getLine(), e, s1, s2); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(11/*STATEMENT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENT ::= PRINT LPAREN EXPR RPAREN SEMI 
            {
              Statement RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
         RESULT = new Print(getLine(), e); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(11/*STATEMENT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENT ::= TYPE ID INIT SEMI 
            {
              Statement RESULT = null;
        Type t = (Type)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-3)).value;
        String i = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = new Declaration(getLine(), t, i, e); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(11/*STATEMENT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= ID ASSIGN EXPR SEMI 
            {
              Statement RESULT = null;
        String i = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-3)).value;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = new Assign(getLine(), i, e); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(11/*STATEMENT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT ::= EXPR SEMI 
            {
              Statement RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = e; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(11/*STATEMENT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LSTATEMENTS ::= LSTATEMENTS STATEMENT 
            {
              Statements RESULT = null;
        Statements l = (Statements)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
        Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = l.appendElement(s); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(10/*LSTATEMENTS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LSTATEMENTS ::= STATEMENT 
            {
              Statements RESULT = null;
        Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = (new Statements(getLine())).appendElement(s); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(10/*LSTATEMENTS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= EPSILON 
            {
              Statements RESULT = null;
         RESULT = new Statements(getLine()); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(9/*STATEMENTS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= LSTATEMENTS 
            {
              Statements RESULT = null;
        Statements l = (Statements)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = l; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(9/*STATEMENTS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FORMAL ::= ID COLON TYPE 
            {
              Formal RESULT = null;
        String i = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Type t = (Type)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Formal(getLine(), i, t); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(8/*FORMAL*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FORMALS ::= EPSILON 
            {
              Formals RESULT = null;
         RESULT = new Formals(getLine()); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(7/*FORMALS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FORMALS ::= FORMAL 
            {
              Formals RESULT = null;
        Formal f = (Formal)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = (new Formals(getLine())).appendElement(f); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(7/*FORMALS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FORMALS ::= FORMALS COMMA FORMAL 
            {
              Formals RESULT = null;
        Formals l = (Formals)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Formal f = (Formal)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = l.appendElement(f); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(7/*FORMALS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INIT ::= EPSILON 
            {
              Expression RESULT = null;
         RESULT = new NoExpression(getLine()); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(6/*INIT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INIT ::= ASSIGN EXPR 
            {
              Expression RESULT = null;
        Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = e; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(6/*INIT*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTION ::= error DEF 
            {
              Function RESULT = null;

              CUP$ViperParser$result = new java_cup.runtime.Symbol(5/*FUNCTION*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCTION ::= DEF ID LPAREN FORMALS RPAREN COLON RTYPE LBRACE STATEMENTS RETURNE RBRACE 
            {
              Function RESULT = null;
        String i = (String)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-9)).value;
        Formals f = (Formals)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-7)).value;
        Type t = (Type)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-4)).value;
        Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-2)).value;
        Expression r = (Expression)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
         RESULT = new Function(getLine(), i, f, t, s, r); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(5/*FUNCTION*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RTYPE ::= VOID 
            {
              Type RESULT = null;
        Type v = (Type)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = v; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(4/*RTYPE*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RTYPE ::= TYPE 
            {
              Type RESULT = null;
        Type t = (Type)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = t; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(4/*RTYPE*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPE ::= BOOL 
            {
              Type RESULT = null;
        Type b = (Type)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = b; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(3/*TYPE*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPE ::= INT 
            {
              Type RESULT = null;
        Type i = (Type)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = i; 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(3/*TYPE*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCTIONS ::= FUNCTION 
            {
              Functions RESULT = null;
        Function f = (Function)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = (new Functions(getLine())).appendElement(f); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(2/*FUNCTIONS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCTIONS ::= FUNCTIONS FUNCTION 
            {
              Functions RESULT = null;
        Functions l = (Functions)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
        Function f = (Function)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = l.appendElement(f); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(2/*FUNCTIONS*/, RESULT);
            }
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT = null;
        Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-1)).value;
        RESULT = start_val;
              CUP$ViperParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$ViperParser$parser.done_parsing();
          return CUP$ViperParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= FUNCTIONS 
            {
              Program RESULT = null;
        Functions f = (Functions)((java_cup.runtime.Symbol) CUP$ViperParser$stack.elementAt(CUP$ViperParser$top-0)).value;
         RESULT = new Program(getLine(), f); 
              CUP$ViperParser$result = new java_cup.runtime.Symbol(1/*PROGRAM*/, RESULT);
            }
          return CUP$ViperParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

